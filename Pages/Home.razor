@page "/"

@using System.Timers

<PageTitle>Animals Matching Game</PageTitle>

<style>
    .container {
        width: 400px;
    }

    button {
        width: 100px;
        height: 100px;
        font-size: 50px;
    }

    .modal {
        display: none;
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.4);
    }

    .modal-content {
        background-color: #fefefe;
        margin: 15% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
    }
</style>

<div class="container">
    <div class="row">
        @for (var animalNumber = 0; animalNumber < shuffledAnimals.Count; animalNumber++)
        {
            var animal = shuffledAnimals[animalNumber];
            var uniqueDescription = $"Button #{animalNumber}";
            <div class="col-3">
                <button @onclick="@(async () => ButtonClick(animal, uniqueDescription))"
                        type="button" class="btn btn-outline-dark">
                    @animal
                </button>
            </div>
        }
    </div>
    <div class="row">
        <h2>Matches found: @matchesFound</h2>
    </div>
    <div class="row">
        <h2>Time: @timeDisplay</h2>
    </div>
</div>

@if (showPlayAgainPopup)
{
    <div class="modal" tabindex="-1" role="dialog" style="display: block;">
        <div class="modal-content">
            <h2>Play Again?</h2>
            <button @onclick="@(async () => await PlayAgain(true))" class="btn btn-primary">Yes</button>
            <button @onclick="@(async () => await PlayAgain(false))" class="btn btn-secondary">No</button>
        </div>
    </div>
}

@code {
    List<string> animalEmoji = new List<string>()
    {
        "🐶", // Dog
        "🐺", // Wolf
        "🐱", // Cat
        "🐭", // Mouse
        "🦊", // Fox
        "🐻", // Bear
        "🐯", // Tiger
        "🐰", // Rabbit
        "🐷", // Pig
        "🐮", // Cow
        "🐸", // Frog
        "🦁", // Lion
        "🐵", // Monkey
        "🐼", // Panda
        "🐨", // Koala
        "🦄", // Unicorn
    };

    List<string> shuffledAnimals = new List<string>();

    int matchesFound = 0;

    Timer timer;
    int tenthsOfSecondsElapsed = 0;
    string timeDisplay;
    bool showPlayAgainPopup = false;
    bool showLastGameState = false;

    protected override void OnInitialized()
    {
        timer = new Timer(100);
        timer.Elapsed += Timer_Tick;
        SetUpGame().Wait(); // Wait for SetUpGame to finish initializing
    }

    private async Task SetUpGame()
    {
        Random random = new Random();
        var uniqueAnimals = animalEmoji
            .OrderBy(item => random.Next())
            .Distinct()
            .Take(8)
            .ToList();

        var shuffledPairs = uniqueAnimals.SelectMany(animal => new[] { animal, animal }).ToList();

        shuffledAnimals = shuffledPairs
            .OrderBy(item => random.Next())
            .ToList();

        matchesFound = 0;
        tenthsOfSecondsElapsed = 0;
        timeDisplay = "0.0s";
        showPlayAgainPopup = false;
        showLastGameState = false;
    }

    string lastAnimalFound = string.Empty;
    string lastDescription = string.Empty;
    private async Task ButtonClick(string animal, string animalDescription)
    {
        if (lastAnimalFound == string.Empty)
        {
            lastAnimalFound = animal;
            lastDescription = animalDescription;
            timer.Start();
        }
        else if ((lastAnimalFound == animal) && (animalDescription != lastDescription))
        {
            lastAnimalFound = string.Empty;
            shuffledAnimals = shuffledAnimals
                .Select(a => a.Replace(animal, string.Empty))
                .ToList();

            matchesFound++;
            if (matchesFound == 8)
            {
                timer.Stop();
                timeDisplay += " - Play Again?";
                showPlayAgainPopup = true;
            }
        }
        else
        {
            lastAnimalFound = string.Empty;
        }

        await InvokeAsync(StateHasChanged);
    }

    private void Timer_Tick(Object source, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            tenthsOfSecondsElapsed++;
            timeDisplay = (tenthsOfSecondsElapsed / 10F)
                .ToString("0.0s");
            StateHasChanged();
        });
    }

    private async Task PlayAgain(bool playAgain)
    {
        if (playAgain)
        {
            await SetUpGame();
        }
        else
        {
            showPlayAgainPopup = false;
        }

        await InvokeAsync(StateHasChanged);
    }
}
