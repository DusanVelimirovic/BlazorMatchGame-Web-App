@page "/"

@using System.Timers

<PageTitle>Animals Matching Game</PageTitle>

<style>
    .container {
        width: 400px;
    }

    button {
        width: 100px;
        height: 100px;
        font-size: 50px;
    }
</style>

<div class="container">
    <div class="row">
        @for (var animalNumber = 0; animalNumber < shuffledAnimals.Count; animalNumber++)
        {
            var animal = shuffledAnimals[animalNumber];
            var uniqueDescription = $"Button #{animalNumber}";
            <div class="col-3">
                <button @onclick="@(() => ButtonClick(animal, uniqueDescription))"
                        type="button" class="btn btn-outline-dark">
                    @animal
                </button>
            </div>
        }
    </div>
    <div class="row">
        <h2>Matches found: @matchesFound</h2>
    </div>
    <div class="row">
        <h2>Time: @timeDisplay</h2>
    </div>
</div>

@code {
    // Animals list
    List<string> animalEmoji = new List<string>()
    {
        "🐶", // Dog
        "🐺", // Wolf
        "🐱", // Cat
        "🐭", // Mouse
        "🦊", // Fox
        "🐻", // Bear
        "🐯", // Tiger
        "🐰", // Rabbit
        "🐷", // Pig
        "🐮", // Cow
        "🐸", // Frog
        "🦁", // Lion
        "🐵", // Monkey
        "🐼", // Panda
        "🐨", // Koala
        "🦄", // Unicorn
    };

    List<string> shuffledAnimals = new List<string>();

    int matchesFound = 0;

    // Timer
    Timer timer;
    int tenthsOfSecondsElapsed = 0;
    string timeDisplay;

    protected override void OnInitialized()
    {
        timer = new Timer(100);
        timer.Elapsed += Timer_Tick;
        SetUpGame();
    }

    private void SetUpGame()
    {
        // Shuffle animals and take the first 8 unique animals
        Random random = new Random();
        var uniqueAnimals = animalEmoji
            .OrderBy(item => random.Next())
            .Distinct()
            .Take(8)
            .ToList();

        // Duplicate each selected animal once to form pairs
        var shuffledPairs = uniqueAnimals.SelectMany(animal => new[] { animal, animal }).ToList();

        // Shuffle the list again to randomize the pairs
        shuffledAnimals = shuffledPairs
            .OrderBy(item => random.Next())
            .ToList();

        matchesFound = 0;
        tenthsOfSecondsElapsed = 0;
    }

    string lastAnimalFound = string.Empty;
    string lastDescription = string.Empty;
    private void ButtonClick(string animal, string animalDescription)
    {
        if (lastAnimalFound == string.Empty)
        {
            // First selection of the pair. Remember it.
            lastAnimalFound = animal;
            lastDescription = animalDescription;

            // Start timer
            timer.Start();
        }
        else if ((lastAnimalFound == animal) && (animalDescription != lastDescription))
        {
            // Match found! Reset for next pair.
            lastAnimalFound = string.Empty;
            // Replace found animals with empty string to hide them.
            shuffledAnimals = shuffledAnimals
                .Select(a => a.Replace(animal, string.Empty))
                .ToList();

            matchesFound++;
            if (matchesFound == 8)
            {
                // Stop the timer and ask player to play again
                timer.Stop();
                timeDisplay += " - Play Again?";

                SetUpGame();
            }
        }
        else
        {
            // User selected a pair that don't match.
            // Reset selection.
            lastAnimalFound = string.Empty;
        }
    }

    private void Timer_Tick(Object source, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            tenthsOfSecondsElapsed++;
            timeDisplay = (tenthsOfSecondsElapsed / 10F)
                .ToString("0.0s");
            StateHasChanged();
        });
    }
}
