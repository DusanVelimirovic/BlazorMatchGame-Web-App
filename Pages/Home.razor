@page "/"

@using System.Timers 

<PageTitle>Animals Matching Game</PageTitle>

<!-- CSS Styles -->
<style>
    .container {
        width: 400px;
    }

    button {
        width: 100px;
        height: 100px;
        font-size: 50px;
    }

    .modal {
        display: none;
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.4);
    }

    .modal-content {
        background-color: #fefefe;
        margin: 15% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
    }
</style>

<!-- Modal for selecting game mode initial state --> gameStarted = false -->
@if (!gameStarted)
{
    <div class="modal" tabindex="-1" role="dialog" style="display: block;">
        <div class="modal-content">
            <h2>Select Game Mode</h2>
            <button @onclick="@(async () => await StartGame(true))" class="btn btn-primary">Classic Mode</button>
            <button @onclick="@(async () => await StartGame(false))" class="btn btn-secondary">Advanced Mode</button>
        </div>
    </div>
}

<!-- Game board -->
<div class="container">
    <!-- Dispplay button for every animal -->
    <div class="row">
        @for (var animalNumber = 0; animalNumber < shuffledAnimals.Count; animalNumber++)
        {
            var animal = shuffledAnimals[animalNumber];
            var uniqueDescription = $"Button #{animalNumber}";
            <div class="col-3">
                <button @onclick="@(async () => ButtonClick(animal, uniqueDescription))"
                        type="button" class="btn btn-outline-dark">
                    @animal
                </button>
            </div>
        }
    </div>
    <!-- Display game statistic -->
    <div class="row">
        <h2>Matches found: @matchesFound</h2>
    </div>
    <div class="row">
        <h2>Time: @timeDisplay</h2>
    </div>
    <div class="row">
        @if (isFirstGame)
        {
            <h2>First Game!</h2>
        }
        else
        {
            <h2>Best Time: @bestTimeInSeconds.ToString("0.0s")</h2>
        }
    </div>
</div>



<!-- Play again modal-->
@if (showPlayAgainPopup)
{
    <div class="modal" tabindex="-1" role="dialog" style="display: block;">
        <div class="modal-content">
            @if (showFasterThanThunderboltModal)
            {
                <h2>Oh man you are faster than the thunderbolt!!</h2>
            }
            else
            {
                <h2>Keep trying!!</h2>
            }
            <button @onclick="@(async () => await PlayAgain(true))" class="btn btn-primary">Yes</button>
            <button @onclick="@(async () => await PlayAgain(false))" class="btn btn-secondary">No</button>
        </div>
    </div>
}

@code {

    // Store available animals emoji
    List<string> animalEmoji = new List<string>()
    {
        "🐶", // Dog
        "🐺", // Wolf
        "🐱", // Cat
        "🐭", // Mouse
        "🦊", // Fox
        "🐻", // Bear
        "🐯", // Tiger
        "🐰", // Rabbit
        "🐷", // Pig
        "🐮", // Cow
        "🐸", // Frog
        "🦁", // Lion
        "🐵", // Monkey
        "🐼", // Panda
        "🐨", // Koala
        "🦄", // Unicorn
    };

    // Variables container

    // Responsable to hold value for controling of display game selecting modal
    bool gameStarted = false; // Initial state

    // Responsable to hold value for controling of game board display
    string containerDisplayStyle = "display: none;"; 

    // Contain unique list of animals in the board
    List<string> shuffledAnimals = new List<string>();

    // Variable to control the visibility of the modal for "faster than thunderbolt" message
    bool showFasterThanThunderboltModal = false;

    // Responsable to hold value to decide if player need to see just message (when he plays the game for the first time) or best time achieved
    bool isFirstGame = true;

    // Store found animals matches
    int matchesFound = 0;

    // Instantiate timer object - global available
    Timer timer;

    // An integer to store elapsed time in tenths of a second
    int tenthsOfSecondsElapsed = 0;

    // An string to store and display player elapsed time
    string timeDisplay;

    // Variable to store the best time achieved by the player
    float bestTimeInSeconds = float.MaxValue; // Initial value

    // A boolean flag to control the visibility of the "Play Again" confirmation modal
    bool showPlayAgainPopup = false; // Initial value

    // A boolean flag to control the visibility of the last game state modal
    bool showLastGameState = false;

    // Main method to start the game based on the selected mode
    private async Task StartGame(bool isClassicMode)
    {
        gameStarted = true; // Set gameStarted flag to true
        containerDisplayStyle = "display: block;"; // Show the game container

        // Setup the game based on the selected mode
        if (isClassicMode)
        {
            // Start the game in Classic Mode
            await SetUpGame();
        }
        else
        {
            // Start the game in Advanced Mode
            // Implement logic for Advanced Mode
            // For now, let's just start the game in Classic Mode
            await SetUpGame();
        }
    }

    // Perform necessary sets up the timer and initializes the game state when the component is first initialized
    protected override void OnInitialized()
    {
        timer = new Timer(100); // A Timer object is created with an interval of 100 milliseconds (0.1 seconds)
        timer.Elapsed += Timer_Tick; // every 100 milliseconds, the Timer_Tick method will be called to update the elapsed time
        SetUpGame().Wait(); // Wait for SetUpGame to finish initializing
    }

    // Method responsible for build up Game Board
    private async Task SetUpGame()
    {
        // Randomly select 8 random animal emoji
        Random random = new Random();
        var uniqueAnimals = animalEmoji
            .OrderBy(item => random.Next())
            .Distinct()
            .Take(8)
            .ToList();

        // Build duplicated animal emoji (animals pairs) list from uniqueAnimals generated in previous step
        var shuffledPairs = uniqueAnimals.SelectMany(animal => new[] { animal, animal }).ToList();

        // Push animals emoji pairs in the List
        shuffledAnimals = shuffledPairs
            .OrderBy(item => random.Next())
            .ToList();

        // Set up initial game statistic
        matchesFound = 0;
        tenthsOfSecondsElapsed = 0;
        timeDisplay = "0.0s";
        showPlayAgainPopup = false;
        showLastGameState = false;
    }

    // Main game logic
    // Responsible for the processes the player's actions, checks for matches, updates the game state, and handles the game timer
    string lastAnimalFound = string.Empty;
    string lastDescription = string.Empty;
    private async Task ButtonClick(string animal, string animalDescription)
    {
        // Player click first animal
        // Timer start
        if (lastAnimalFound == string.Empty)
        {
            lastAnimalFound = animal;
            lastDescription = animalDescription;
            timer.Start();
        }
        // Player clicks the second animal
        // Check if it matches the first animal
        else if ((lastAnimalFound == animal) && (animalDescription != lastDescription))
        {
            // If the second animal matches the first one
            // Clear the stored information about the first animal
            lastAnimalFound = string.Empty;

            // Remove the matched animals from the game board by replacing them with an empty string
            shuffledAnimals = shuffledAnimals
                .Select(a => a.Replace(animal, string.Empty))
                .ToList();

            // Increment the number of matches found
            matchesFound++;

            // If all matches are found (8 matches in total)
            // When the player completes the game
            if (matchesFound == 8)
            {
                timer.Stop();
                // Compare current time with a best time     
                if (tenthsOfSecondsElapsed / 10F < bestTimeInSeconds)
                {
                    bestTimeInSeconds = tenthsOfSecondsElapsed / 10F; // Update best time
                    showFasterThanThunderboltModal = true; // Show positive modal
                }
                else
                {
                    showFasterThanThunderboltModal = false;
                }

                isFirstGame = false; // Update first game state
                showPlayAgainPopup = true;

            }
        }
   

        // If the second animal doesn't match the first one
        else
        {
            // Clear the stored information about the first animal
            lastAnimalFound = string.Empty;
        }

        // Update the UI asynchronously to reflect the changes
        await InvokeAsync(StateHasChanged);
    }

    // This method is called each time the timer ticks
    private void Timer_Tick(Object source, ElapsedEventArgs e)
    {
        InvokeAsync(() =>
        {
            tenthsOfSecondsElapsed++;
            timeDisplay = (tenthsOfSecondsElapsed / 10F)
                .ToString("0.0s");
            StateHasChanged();
        });
    }

    private async Task PlayAgain(bool playAgain)
    {
        if (playAgain)
        {
            await SetUpGame();
        }
        else
        {
            showPlayAgainPopup = false;
        }
        //  Ntify the UI that the state has changed and needs to be re-rendered
        await InvokeAsync(StateHasChanged);
    }
}
